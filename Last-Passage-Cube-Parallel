program last_passage_cube_parallel
    implicit none
    real(8) :: x, y, z
    real(8), parameter :: side = 1.0d0
    real(8), parameter :: radius = sqrt(3.0d0) / 2.0d0
    logical :: inf, inside_cube
    integer, parameter :: N = 10**6
    integer :: particles_cube = 0
    integer :: particles_inf = 0
    real(8) :: runtime
    integer :: i, j, counti, countf, count_rate, count_max
    real(8) :: sigma, theta

    real(8), parameter :: lp_radius = 0.5d0
    real(8) :: x0, y0, z0

    integer :: ierr, rank, processN
    integer :: counti, countf, count_rate, count_max
    real(8) :: potential, local_sigma
    real(8) :: runtime

    include 'mpif.h'
    include "sprng_f.h"

    integer :: seed, gentype
    integer :: stream

    call MPI_INIT(ierr)
    call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)
    call MPI_COMM_SIZE(MPI_COMM_WORLD, processN, ierr)

    seed = 2131257613
    gentype = 5
    call init_sprng(seed, SPRNG_DEFAULT, gentype, stream)

    call system_clock(counti, count_rate, count_max)

    local_sigma = 0.0d0

    do j = rank + 1, 11, processN
        sigma = 0.0d0

        x0 = 0.1d0 * (j - 1) - 0.5d0
        y0 = 0.1d0 * (j - 1) - 0.5d0
        z0 = 0.5d0

        do i = 1, N
            inf = .false.
            inside_cube = .false.

            call center(x0, y0, z0, x, y, z, lp_radius)
            call unif_samp(x, y, z, lp_radius, theta)

            do while ((inside_cube .eqv. .false.) .and. (inf .eqv. .false.))
                call wop(x, y, z)
                call in_the_cube(inside_cube, x, y, z)
                call infinity(inf, x, y, z)

                if (inside_cube) then
                    particles_cube = particles_cube + 1
                    exit
                else if (inf) then
                    particles_inf = particles_inf + 1
                    call summ(theta, sigma, inf)
                    exit
                else
                    call center(x0, y0, z0, x, y, z, lp_radius)
                    call bts(inf, inside_cube, x, y, z)
                end if
            end do
        end do

        sigma = sigma * 100 / real(N)
        local_sigma = local_sigma + sigma
    end do


    call MPI_REDUCE(local_sigma, potential, 1, MPI_DOUBLE_PRECISION, MPI_SUM, 0, MPI_COMM_WORLD, ierr)

    if (rank == 0) then
        do j = 1, 11
            x0 = 0.1d0 * (j - 1) - 0.5d0
            y0 = 0.1d0 * (j - 1) - 0.5d0
            z0 = 0.5d0

            write(*, "('The charge density at the point (', F5.2, ' ', F5.2, ' ', F5.2, ') is ', F10.7)") x0, y0, z0, potential
        end do

        print *, "Number of total particles: ", particles_cube + particles_inf
        print *, "Particles inside: ", particles_cube
        print *, "Particles diffused to infinity: ", particles_inf
        runtime = real(countf - counti) / real(count_rate)
        write(*, '(A, F6.3, A)') "Runtime: ", runtime, "s"
    end if

    call system_clock(countf, count_rate, count_max)
    runtime = real(countf - counti) / real(count_rate)

    call MPI_FINALIZE(ierr)

end program last_passage_cube_parallel

!Returns the coordinate of the center of the last passage sphere 
subroutine center(x,y,z,x_center,y_center,z_center,lp_radius)
    implicit none 
    real*8, intent(in) :: x,y,z,lp_radius
    real*8, intent(inout) :: x_center, y_center, z_center
    real*8, parameter :: side = 0.5d0

    if (z >= side .and. abs(x) <= side .and. abs(y) <= side) then
        ! Upper x-y plane
        x_center = x
        y_center = y
        z_center = z+lp_radius
    else if (z <= -side .and. abs(x) <= side .and. abs(y) <= side) then
        ! Lower x-y plane
        x_center = x
        y_center = y
        z_center = z-lp_radius
    else if (y >= side .and. abs(x) <= side .and. abs(z) <= side) then
        ! Back x-z plane
        x_center = x
        y_center = y+lp_radius
        z_center = z
    else if (y <= -side .and. abs(x) <= side .and. abs(z) <= side) then
        ! Front x-z plane
        x_center = x
        y_center = y-lp_radius
        z_center = z
    else if (x >= side .and. abs(y) <= side .and. abs(z) <= side) then
        ! Right y-z plane
        x_center = x+lp_radius
        y_center = y
        z_center = z
    else
        !Left y-z plane
        x_center = x-lp_radius
        y_center = y
        z_center = z
    end if

end subroutine center 

!Uniform sample of points in the sphere
subroutine unif_samp(x, y, z, radius_inf,theta)
    implicit none
    real*8, intent(in):: radius_inf
    real*8, intent(inout):: x, y, z
    real*8:: urnd1, urnd2, phi, R
    real*8, parameter:: pi = dacos(-1.d0)
    real*8, intent(inout) :: theta

    call random_number(urnd1)
    call random_number(urnd2)
    R = radius_inf
    theta = dacos(1.d0-2.d0 * urnd1)
    !!theta  = dacos(dsqrt(urnd1))
    phi = 2.d0 * pi * urnd2

    x = x + R * dsin(theta) * dcos(phi) !!CHANGED. 
    y = y + R * dsin(theta) * dsin(phi) !!CHANGED. 
    z = z + R * dcos(theta) !!CHANGED. 
end subroutine unif_samp

!Distance from the point in the sphere to the nearest plane 
subroutine d_to_plane(x, y, z, d)
    implicit none
    real*8, intent(in) :: x, y, z
    real*8, intent(out) :: d
    real*8, parameter :: side = 0.5d0 

    d = max(abs(x),abs(y),abs(z))
    d = d-side   
    !no need for plane selection
end subroutine d_to_plane

!Distance from any two arbitrary points 
subroutine distance(x, y, z, x0, y0, z0, d)
    implicit none
    real*8, intent(in):: x, y, z, x0, y0, z0
    real*8, intent(out) :: d

    d = dsqrt((x - x0)**2 + (y - y0)**2 + (z - z0)**2)
end subroutine distance

!Walk on planes with the correct distribution 
subroutine wop(x,y,z)
    implicit none
    real*8, intent(inout) :: x,y,z
    real*8 :: x0, y0, z0
    real*8 :: urnd1, theta, d,r
    double precision, parameter :: pi = dacos(-1.d0)
    !Radius of the enclosing sphere
    real*8, parameter :: a = sqrt(3.0d0)/2.0d0
    ! Radius of the top surface. 
    real*8, parameter :: rho = sqrt(2.0d0)/2.0d0 

    x0 = x
    y0 = y
    z0 = z
    call random_number(theta)
    theta = theta * 2* pi
    call random_number(urnd1)
    !!costh=-(1.d0-t)**2 + 2.d0*(1.d0-t)*(1.d0+t**2)*p2+2.d0*t*(1d0+t**2)*p2**2
    !!costh=costh/(1.d0-t+2.d0*t*p2)**2
    !!theta = dacos(costh)

    if (z0 >= 0.5d0 .and. x0 <= abs(rho) .and. y0 <= abs(rho)) then
        !Diffusion in the upper x-y plane
        d = z0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = y0 + r*dsin(theta)
        z = 0.5d0
    else if (z0 <= -0.5d0 .and. x0 <= abs(rho) .and. y0 <= abs(rho)) then
        !Diffusion in the lower x-y plane
        d = abs(z0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = y0 + r*dsin(theta)
        z = -0.5d0
    else if (y0 >= 0.5d0 .and. x0 <= abs(rho) .and. z0 <= abs(rho)) then
        !Diffusion in the back x-z plane
        d = y0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = 0.5d0
        z = z0 + r*dsin(theta)
    else if (y0 <= -0.5d0 .and. x0 <= abs(rho) .and. z0 <= abs(rho)) then
        !Diffusion in the front x-z plane
        d = abs(y0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = x0 + r*dcos(theta)
        y = -0.5d0
        z = z0 + r*dsin(theta)
    else if (x0 >= 0.5d0 .and. y0 <= abs(rho) .and. z0 <= abs(rho)) then
        !Diffusion in the right y-z plane
        d = x0-0.5d0
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = 0.5d0
        y = y0 + r*dcos(theta)
        z = z0 + r*dsin(theta)
    else
        !Diffusion in the left y-z plane
        d = abs(x0+0.5d0)
        r = d*sqrt(urnd1**2/(1-urnd1))
        x = -0.5d0
        y = y0 + r*dcos(theta)
        z = z0 + r*dsin(theta)
    end if
end subroutine wop

!Back to sphere 
subroutine bts(inf,inside_cube,x,y,z)
    implicit none
    real*8, intent(inout) :: x,y,z
    logical, intent(in) :: inf, inside_cube
    real*8, parameter :: lp_radius = 0.5d0
    real*8 :: theta

    if ((inside_cube .eqv. .false.) .and. (inf .eqv. .false.)) then
        call unif_samp(x,y,z,lp_radius,theta)
    end if 
end subroutine bts 

subroutine infinity(inf, x, y, z)
    implicit none
    real*8, intent(in) :: x, y, z
    logical, intent(inout) :: inf
    real*8 :: r, ffr, j
    real*8 :: urnd1
    real*8, parameter :: a = sqrt(3.0d0)/2.0d0

    call distance(x, y, z, 0.d0, 0.d0, 0.d0, r)
    call random_number(urnd1)
    j = sqrt(urnd1**2/(1-urnd1**2))

    ffr = j * r

    if (ffr >= a) then
        inf = .true.
    else
        inf = .false.
    end if
end subroutine infinity

!Inside the cube 
subroutine in_the_cube(inside_cube, x, y, z) 
    implicit none
    logical, intent(inout) :: inside_cube
    real*8, intent(in) :: x, y, z

    if ((abs(x) <= 0.5d0) .and. (abs(y) <= 0.5d0) .and. (abs(z) <= 0.5d0)) then
        inside_cube = .true.
    else
        inside_cube = .false.
    end if
end subroutine in_the_cube

!Integration
subroutine summ(theta,sigma,inf)
    implicit none 
    real*8, intent(in) :: theta
    logical, intent(in) :: inf
    real*8, intent(inout) :: sigma
    real*8 :: const 

    const = 16.d0 * dsqrt(2.d0)

    if (inf .eqv. .true.) then 
      sigma = sigma + dsin(theta) / (const*(1.d0+dcos(theta))**1.5)
    end if 

end subroutine summ
